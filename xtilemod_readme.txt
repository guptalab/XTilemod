************************************************************************************
Read Me
************************************************************************************

Disclaimer
===========
The contents of this version of code may contain bugs.
Any suggestions and constructive criticism will help us in making a better version of XtileMod

************************************************************************************

Basic Instructions
==================

I)   Warning : This code is in Java and will not run without installation of JDK and JRE 1.6 version of windows.
If you are using Linux, gcc should be installed.


II) Compilation Method
   1) You can compile and run a file using Java Editor software's
   2)Create a folder in C drive named XtileCode
   3)Copy and Paste the Xtile_Arithmetic.java along with other java files in it
   4)Compile all the java files in the folder named Xtilemod by first going to the folder and then typing javac .*; 
	or
   if not javac each java file individually by typing this code ==> javac Filename.java 
   5)Run command prompt by searching cmd file in Windows OR open Console Terminal Window in Linux
   6)Type ==> cd XtileCode or cd FileLocation
   7)Run the .class File java xtilemod.java

III) Option Select
   1) There are three versions of Addition, One version of N input adder,N input+Simple(2 input) multiplication, Subtraction,Division
   2) Use different versions according the trade of Tiles used you can give which impedes Faster Result
   3) Finally after you have entered the input and the compilation is complete you will get a .tiles file in XtileCode Folder


IV)  Installing Xgrow for Output 
   1)To install, download the xgrow package and uncompress it. 
     Download it from following link => http://www.dna.caltech.edu/Xgrow/
   2)For most uses, it should be enough to do "make." This will produce an xgrow binary in the package directory.
   3)Try a few command-line examples from example-runs and example-runs-talks using the tile sets provided in tilesets.
   4) Run "xgrow --" to see help on the command-line parameters.
   5)Xgrow is known to compile under Red Hat Linux 8, under Mac OSX and with Cygwin under Windows. 
   6) Eg in Linux
	make xgrow
	cd Xgrow
	cd tileset
	(copy the executable file in tileset folder)
	(copy the code to be run in that folder or any folder you want to run be it folder1)
	cd LocationOfFolder1
	(copy file(.tiles) generated by Xtilemod.java in folder1 =>eg add_8_tile_12,9.tiles )
	.\xgrow file.tiles  =>eg .\xgrow add_8_tile_12,9

 Note	:prime.java is kept seperately.Just compile it with inputs and it will generate .tiles file.

V)  Understanding .tiles File

   1)Use Xtile editor Help for understand the format of .tiles file
  

VI) Color Indicators (Read the number in conventional way Right to left and top to bottom in case of input2 and bottom to top in case of quotient)
    *Seed Tile 		:	Green
    *Output Tile	:	Red   = 1	White  = 0
    *Input  Tile	:	Brown = 1 	yellow = 0
    *(6 inputs)		:	Brown(11)	yellow(10)	Blue(10`)	grey(01)	pink(00)	Cyan(00`)
    *You can open and look .tiles file for more information and verify input and output with binary Representaton in File .
    *It will also help you in knowing how algorithm proceeds
    *Signed Bit		:	Brown = 1	yellow = 0

VII)Input and Output in different Algoritms


   Addition Code
   Addition has three methods of implementation.

   1) 8 tile Addition


    * Input1 : Bottommost Row represents the First input
    * Input2 : Topmost Row Represents the Second input
    * Output : The middle Row Represents the Output
     
     
   2) L-Config Variable Tile Adder
     
    *Input1  : Bottommost Row represent First input
    *Input2  : Rightmost Column represents Second Input(<=First Input)
    *Output  : Topmost Row represents the output

   3) L-Config Constant Tile Adder
     
    *Input1  : Bottommost Row represent First input
    *Input2  : Rightmost Column represents Second Input(<=First Input)
    *Output  : Topmost Row represents the output


Note : Difference between Contant and Variable Tile adder is that the computational tiles used in Var Tile Adder is dependent on lenght of second input

   4) Multiplier
     
    *Input1  : Bottommost Row represent First input
    *Input2  : Rightmost Column represents Second Input(<=First Input)
    *Output  : Topmost Row represents the output

   5) N Bit Multiplier
     
    *Input1  : Bottommost Row represent First number
    *Output  : Topmost Row represents the output

   6) Subtractor
     
    *Input1  : Bottommost Row represent First input
    *Input2  : Rightmost Column represents Second Input(<=First Input)
    *Output  : Topmost Row represents the output


   7) Division code Tileset
     
    *Input1  : Bottommost Row represent First input and Second Input
    *Output1 : Leftmost column represents the 	quotient
    *Output2 : Topmost Row represents the remainder

   8) N-Input adder(Fast)
     
    *Input1  : Bottommost Row represent First and Second input
    *Input2  : next row represents middle temporary sum and next consecutive inputs
    *Output  : Topmost Row represents the output

   9) N-Input adder(Slow)
     
    *Input1  : Bottommost Row represent First and Second input
    *Input2  : Bottommost Row represents middle temporary sum and next sub-section of Rightmost Columns represents next consecutive inputs
    *Output  : Topmost Row represents the output


   10) N-Input adder-subtractor
     
    *Input1  : Bottommost Row represent First and Second input along with the signed bit
    *Input2  : next row represents middle temporary sum and next consecutive inputs
    *Output  : Topmost Row represents the output

   11)N-Input modulo adder
     
    *Input1  : Bottommost Row represent First and Second input along with the signed bit
    *Input2  : next row represents middle temporary sum and next consecutive inputs
    *Output  : Topmost Row represents the output

VIII)Simple Example
	suppose you want to add 4 and 5 by first method of additon(8 tile one)
	run the java code and type 1 for the choice and then the numbers with white spaces separating them
	now get the output of the generated .tiles file and paste it to location where make file has generated its executable image
	cd Filelocation 
	./xgrow add_8_tile_4,5.tiles or probably add_8_tile_5,4.tiles
	output will be seen in the middle row as 
	----------------------------------------
	Red	white	white	Red	which is decoded as
Output:	1	0	0	1	=9 in Decimal Representation

	Input will be seen at the top and the bottom row
	-------------------------------------------------
Input(4)Yellow brown	yellow	yellow  =4 in Decimal Representation
Input(5)Yellow brown	yellow	brown   =5 in Decimal Representation


************************************************************************************
IX)
    *Mentor 						: Manish Gupta
    *Author for Subtractor and costant Tile Adder	: Bhooma and Avinash
    *Author for rest of implementation			: Sandeep Vasani, Abhishek Chhajer, Jaley Dholakiya

************************************************************************************
